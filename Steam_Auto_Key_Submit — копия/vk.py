"""
–î–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥—É–ª–∏ vk_api –∏ re \n
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π Steam –∏–∑ VK –≥—Ä—É–ø—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è vk_api \n
–ù–æ –º—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–µ–º re \n
–ü–æ—Å–ª–µ –º—ã –ø–æ–ª—É—á–∏–º –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –∫–ª—é—á–µ–π \n
–ü—Ä–∏–º–µ—Ä –∫–ª—é—á–µ–π: \n
\n
üîë VYW22-FE*Z8-EL06Z \n
üîë X6J8L-JC2*I-Q6G5M \n
üîë 9T*ZJ-R5NAG-VMNAH \n
üîë G6I*C-AKBPH-58L78 \n
\n
–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π —É –∫–∞–∂–¥–æ–≥–æ –∏–∑ –Ω–∏—Ö –µ—Å—Ç—å *, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 9 \n
–í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª—é—á–µ–π —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è 
"""
import vk_api
import re
# –¢—É—Ç –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à –ª–∏—á–Ω—ã–π API –∫–ª—é—á –æ—Ç Vk
VK_API_KEY = "–¢—É—Ç Api VK"
# –ó–¥–µ—Å—å –∏–º—è –≥—Ä—É–ø–ø—ã –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –º—ã –±–µ—Ä–µ–º –∫–ª—é—á–∏
GROUP_ID = "lololoshkashop24"


def get_last_post(group_id, token):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ –∏–∑ –≥—Ä—É–ø–ø—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ."""
    vk_session = vk_api.VkApi(token=token)
    vk = vk_session.get_api()

    try:
        # response –ø–µ—Ä—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ—Ç–æ—Ä–∞—è —Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã VK
        response = vk.wall.get(domain=group_id, count=1)
        if response['items']: # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ items –≤ —Å–ø–∏—Å–∫–µ respose –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç –ø–æ—Å—Ç—ã
            last_post = response['items'][0] # –±–µ—Ä–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π last_post
            post_text = last_post.get('text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞') # –¢—É—Ç —É–∂–µ –±–µ—Ä–µ—Ç —Ä–æ –∫–ª—é—á—É text –≤–µ—Å—å —Ç–µ–∫—Å—Ç
            return {
                "–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞": post_text,
            } # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ—á–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞
        else: # –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π result –Ω–µ—Ç –∫–ª—é—á–∞ items
            return "–í –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤."
    except vk_api.exceptions.ApiError as e:
        return f"–û—à–∏–±–∫–∞ API: {e}"


def extract_keys(post_text):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞."""
    key_pattern = r'[A-Z0-9\*]{4,}-[A-Z0-9\*]{4,}-[A-Z0-9\*]{4,}'
    keys = re.findall(key_pattern, post_text)
    return keys


def resolve_asterisks(keys):
    """–ó–∞–º–µ–Ω–∞ —Å–∏–º–≤–æ–ª–∞ * –≤ –∫–ª—é—á–∞—Ö –Ω–∞ —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 9."""
    resolved_keys = []
    for key in keys:
        if '*' in key:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∏–º–≤–æ–ª *, –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ
            queue = [key]
            while '*' in queue[0]:  # –ü–æ–∫–∞ –µ—Å—Ç—å *, –∑–∞–º–µ–Ω—è–µ–º –ø–æ –æ—á–µ—Ä–µ–¥–∏
                current_key = queue.pop(0)
                for digit in range(10):  # –ß–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 9
                    queue.append(current_key.replace('*', str(digit), 1))  # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é *
            resolved_keys.extend(queue)  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        else:
            resolved_keys.append(key)  # –ï—Å–ª–∏ –Ω–µ—Ç *, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    return resolved_keys

def key_string():
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç
    post_data = get_last_post(GROUP_ID,VK_API_KEY)
    if isinstance(post_data, dict):  # –ï—Å–ª–∏ –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω
        print("–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç –∏–∑ –≥—Ä—É–ø–ø—ã:")
        print(f"–¢–µ–∫—Å—Ç: {post_data['–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞']}")
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–∏
    keys = extract_keys(post_data['–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞'])
    print("\n–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏:")
    if keys:
        for key in keys:
            print(key)
        # –†–µ—à–∞–µ–º –∫–ª—é—á–∏ —Å * (–∑–∞–º–µ–Ω—è–µ–º –∑–≤–µ–∑–¥—ã –Ω–∞ —Ü–∏—Ñ—Ä—ã)
        resolved_keys = resolve_asterisks(keys)
        return resolved_keys
    else:
        print("–ö–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
